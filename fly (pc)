local plrs = game:GetService("Players")
local uis = game:GetService("UserInputService")
local rs = game:GetService("RunService")

local plr = plrs.LocalPlayer
local spd = 70
local acc = 0.1
local fly = false
local mv = Vector3.zero
local cv = Vector3.zero
local bv
local bg
local box

local hrp
local hum
local chr

local function toggleFly(force)
    if not hum or hum.Health <= 0 then
        fly = false
        if bv then bv:Destroy() bv = nil end
        if bg then bg:Destroy() bg = nil end
        if box then box:Destroy() box = nil end
        cv = Vector3.zero
        return
    end

    fly = force or not fly
    hum.PlatformStand = fly

    if fly then
        if not bv then
            bv = Instance.new("BodyVelocity")
            bv.Name = "f"
            bv.MaxForce = Vector3.new(1e5,1e5,1e5)
            bv.Velocity = Vector3.zero
            bv.Parent = hrp
        end

        if not bg then
            bg = Instance.new("BodyGyro")
            bg.Name = "fg"
            bg.MaxTorque = Vector3.new(1e5,1e5,1e5)
            bg.P = 1e4
            bg.CFrame = hrp.CFrame
            bg.Parent = hrp
        end

        if not box then
            box = Instance.new("Model")
            box.Name = "Box"
            box.Parent = chr

            local hitbox = Instance.new("Part")
            hitbox.Name = "Hitbox"
            hitbox.Size = chr:GetExtentsSize()
            hitbox.Transparency = 1
            hitbox.Anchored = false
            hitbox.CanCollide = true
            hitbox.Parent = box

            box.PrimaryPart = hitbox

            local weld = Instance.new("WeldConstraint")
            weld.Part0 = hrp
            weld.Part1 = hitbox
            weld.Parent = hitbox

            box:PivotTo(hrp.CFrame)
        end
    else
        if bv then bv:Destroy() bv = nil end
        if bg then bg:Destroy() bg = nil end
        if box then box:Destroy() box = nil end
        cv = Vector3.zero
    end
end

local function setupChr(c)
    chr = c
    hrp = chr:WaitForChild("HumanoidRootPart")
    hum = chr:WaitForChild("Humanoid")

    fly = false 
    toggleFly(false)

    hum.Died:Connect(function()
        fly = false
        toggleFly(false)
    end)
end

uis.InputBegan:Connect(function(input,gp)
    if gp then return end
    if hum and hum.Health <= 0 then return end

    if input.KeyCode == Enum.KeyCode.W then mv = mv + Vector3.new(0,0,1) end
    if input.KeyCode == Enum.KeyCode.S then mv = mv + Vector3.new(0,0,-1) end
    if input.KeyCode == Enum.KeyCode.A then mv = mv + Vector3.new(-1,0,0) end
    if input.KeyCode == Enum.KeyCode.D then mv = mv + Vector3.new(1,0,0) end
    if input.KeyCode == Enum.KeyCode.Y then mv = mv + Vector3.new(0,1,0) end
    if input.KeyCode == Enum.KeyCode.U then mv = mv + Vector3.new(0,-1,0) end
    if input.KeyCode == Enum.KeyCode.P then toggleFly() end
end)

uis.InputEnded:Connect(function(input,gp)
    if gp then return end
    if input.KeyCode == Enum.KeyCode.W then mv = mv - Vector3.new(0,0,1) end
    if input.KeyCode == Enum.KeyCode.S then mv = mv - Vector3.new(0,0,-1) end
    if input.KeyCode == Enum.KeyCode.A then mv = mv - Vector3.new(-1,0,0) end
    if input.KeyCode == Enum.KeyCode.D then mv = mv - Vector3.new(1,0,0) end
    if input.KeyCode == Enum.KeyCode.Y then mv = mv - Vector3.new(0,1,0) end
    if input.KeyCode == Enum.KeyCode.U then mv = mv - Vector3.new(0,-1,0) end
end)

rs.RenderStepped:Connect(function(dt)
    if fly and chr and hrp and hum and hum.Health > 0 then
        hum.PlatformStand = true
        local cam = workspace.CurrentCamera.CFrame
        local dir = (cam.RightVector * mv.X + cam.LookVector * mv.Z + cam.UpVector * mv.Y)
        if dir.Magnitude > 0 then dir = dir.Unit end

        local tgtVel = dir * spd
        cv = cv:Lerp(tgtVel, acc)
        if bv then bv.Velocity = cv end

        if bg then
            local look = CFrame.new(hrp.Position, hrp.Position + cam.LookVector)
            bg.CFrame = bg.CFrame:Lerp(look, 0.15)
        end

        if box and box.PrimaryPart then
            box:PivotTo(hrp.CFrame)
        end
    else
        if bv then bv.Velocity = bv.Velocity:Lerp(Vector3.zero, 0.2) end
        fly = false
    end
end)

plr.CharacterAdded:Connect(setupChr)
if plr.Character then setupChr(plr.Character) end
